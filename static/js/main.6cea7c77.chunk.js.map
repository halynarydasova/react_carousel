{"version":3,"sources":["components/Carousel/Carousel.tsx","App.tsx","index.tsx"],"names":["Carousel","state","carouselWidth","activeIndex","setActiveIndex","move","length","props","images","frameSize","step","infinite","setState","newIndex","handleNext","handlePrev","prevProps","this","itemWidth","animationDuration","className","style","width","transform","transition","map","image","idx","src","alt","type","onClick","disabled","React","Component","startValues","App","configurationFields","handleChange","event","currentTarget","name","value","handleChangeCheckbox","prevState","action","htmlFor","id","defaultValue","onChange","max","checked","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.6cea7c77.chunk.js","sourcesContent":["import React from 'react';\nimport './Carousel.scss';\n\ntype Props = {\n  images: string[],\n  step: number,\n  frameSize: number,\n  itemWidth: number,\n  animationDuration: number,\n  infinite: boolean,\n};\ntype State = {\n  carouselWidth: number,\n  activeIndex: number,\n};\n\nclass Carousel extends React.Component<Props, State> {\n  state = {\n    carouselWidth: 390,\n    activeIndex: 0,\n  };\n\n  componentDidUpdate(prevProps: Props) {\n    if (prevProps !== this.props) {\n      this.setState({\n        carouselWidth: this.props.frameSize * this.props.itemWidth,\n      });\n    }\n  }\n\n  setActiveIndex = (move: -1 | 1) => {\n    const { length } = this.props.images;\n    const { frameSize, step, infinite } = this.props;\n\n    this.setState((state) => {\n      if (infinite && state.activeIndex === length - frameSize && move === 1) {\n        return { activeIndex: 0 };\n      }\n\n      if (infinite && state.activeIndex === 0 && move === -1) {\n        return { activeIndex: length - frameSize };\n      }\n\n      const newIndex = state.activeIndex + step * move;\n\n      if (newIndex < 0) {\n        return { activeIndex: 0 };\n      }\n\n      if (newIndex > length - frameSize) {\n        return { activeIndex: length - frameSize };\n      }\n\n      return { activeIndex: newIndex };\n    });\n  };\n\n  handleNext = () => {\n    this.setActiveIndex(1);\n  };\n\n  handlePrev = () => {\n    this.setActiveIndex(-1);\n  };\n\n  render() {\n    const {\n      images,\n      animationDuration,\n      itemWidth,\n      infinite,\n      step,\n    } = this.props;\n    const {\n      carouselWidth,\n      activeIndex,\n    } = this.state;\n\n    return (\n      <div\n        className=\"Carousel\"\n        style={{ width: carouselWidth }}\n      >\n        <ul\n          style={{ transform: `translateX(${-itemWidth * activeIndex}px`, transition: `transform ease ${animationDuration}ms` }}\n          className=\"Carousel__list\"\n        >\n\n          {images.map((image, idx) => (\n            <li\n              key={image}\n              className=\"Carousel__item\"\n            >\n              <img\n                src={image}\n                alt={`${idx + 1}`}\n                width={itemWidth}\n              />\n            </li>\n          ))}\n        </ul>\n\n        <div className=\"Carousel__control-btn\">\n          <button\n            type=\"button\"\n            onClick={() => {\n              this.handlePrev();\n            }}\n            className=\"Carousel__btn Carousel__btn--prev\"\n            aria-label=\"prev\"\n            disabled={!infinite && activeIndex === 0}\n          />\n          <button\n            type=\"button\"\n            data-cy=\"next\"\n            onClick={this.handleNext}\n            className=\"Carousel__btn Carousel__btn--next\"\n            aria-label=\"next\"\n            disabled={!infinite && activeIndex === images.length - step}\n          />\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default Carousel;\n","import React from 'react';\nimport './App.scss';\nimport Carousel from './components/Carousel/Carousel';\n\ninterface State {\n  images: string[];\n  configurationFields: ConfigurationFields;\n}\ninterface ConfigurationFields {\n  step: number;\n  frameSize: number;\n  itemWidth: number;\n  animationDuration: number;\n  infinite: boolean;\n}\n\nconst startValues = {\n  step: 3,\n  frameSize: 3,\n  itemWidth: 130,\n  animationDuration: 1000,\n  infinite: false,\n};\n\nclass App extends React.Component<{}, State> {\n  state = {\n    images: [\n      './img/1.png',\n      './img/2.png',\n      './img/3.png',\n      './img/4.png',\n      './img/5.png',\n      './img/6.png',\n      './img/7.png',\n      './img/8.png',\n      './img/9.png',\n      './img/10.png',\n    ],\n    configurationFields: startValues,\n  };\n\n  handleChange = (event: React.ChangeEvent<HTMLInputElement>) => {\n    const { name, value } = event.currentTarget;\n\n    this.setState((state) => ({\n      configurationFields: {\n        ...state.configurationFields,\n        [name]: value,\n      },\n    }));\n  };\n\n  handleChangeCheckbox = () => {\n    this.setState((prevState) => ({\n      configurationFields: {\n        ...prevState.configurationFields,\n        infinite: !prevState.configurationFields.infinite,\n      },\n    }));\n  };\n\n  render() {\n    const {\n      images,\n      configurationFields,\n    } = this.state;\n    const {\n      step,\n      itemWidth,\n      frameSize,\n      animationDuration,\n      infinite,\n    } = configurationFields;\n\n    return (\n      <div className=\"App\">\n        <h1 data-cy=\"title\" className=\"App__title\">\n          {`Carousel with ${images.length} images`}\n        </h1>\n        <form action=\"#\" className=\"configurationForm\">\n          <label htmlFor=\"itemId\" className=\"configurationForm__field\">\n            Item Width:\n            <input\n              type=\"number\"\n              name=\"itemWidth\"\n              id=\"itemId\"\n              defaultValue={itemWidth}\n              onChange={this.handleChange}\n            />\n          </label>\n          <label htmlFor=\"frameId\" className=\"configurationForm__field\">\n            Frame Size:\n            <input\n              type=\"number\"\n              name=\"frameSize\"\n              id=\"FrameId\"\n              max={images.length}\n              defaultValue={frameSize}\n              onChange={this.handleChange}\n            />\n          </label>\n          <label htmlFor=\"stepId\" className=\"configurationForm__field\">\n            Step:\n            <input\n              type=\"number\"\n              name=\"step\"\n              id=\"stepId\"\n              max={frameSize}\n              defaultValue={step}\n              onChange={this.handleChange}\n            />\n          </label>\n          <label htmlFor=\"duration\" className=\"configurationForm__field\">\n            Animation duration:\n            <input\n              type=\"number\"\n              name=\"animationDuration\"\n              id=\"duration\"\n              defaultValue={animationDuration}\n              onChange={this.handleChange}\n            />\n          </label>\n          <label htmlFor=\"infinity\" className=\"configurationForm__field\">\n            Infinity:\n            <input\n              type=\"checkbox\"\n              name=\"infinity\"\n              id=\"infinity\"\n              checked={infinite}\n              onChange={this.handleChangeCheckbox}\n            />\n          </label>\n        </form>\n        <Carousel\n          images={images}\n          {...configurationFields}\n        />\n      </div>\n    );\n  }\n}\n\nexport default App;\n","import ReactDOM from 'react-dom';\nimport App from './App';\n\nReactDOM.render(<App />, document.getElementById('root'));\n"],"sourceRoot":""}